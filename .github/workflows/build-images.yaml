---
name: Build Docker Images (Reusable)

on:
  workflow_call:
    inputs:
      ref:
        type: string
        required: false
        default: ${{ github.ref }}
        description: Git ref to checkout
      components:
        type: string
        required: false
        description: |-
          The list of components to build images for, formatted as a space-separated list of strings.

          Defaults to: apiext emissary kat-client kat-server test-auth test-shadow test-stats
        default: >-
          apiext
          emissary
          kat-client
          kat-server
          test-auth
          test-shadow
          test-stats
      artifact-bundle-prefix:
        type: string
        required: true
        description: Prefix for arch-specific artifact bundle name

    outputs:
      artifact-id:
        value: ${{ jobs.build-images.outputs.artifact-id }}
        description: GitHub ID of the built image artifact(s)
      artifact-url:
        value: ${{ jobs.build-images.outputs.artifact-url }}
        description: >-
          URL to download the built images artifact. Can be used in many scenarios
          such as linking to images built by a specific CI run in issues or pull requests.
          Users must be logged-in in order for this URL to work. This URL is valid as
          long as the images artifact has not expired or the images artifact, run
          or repository have not been deleted.
      artifact-digest:
        value: ${{ jobs.build-images.outputs.artifact-digest }}
        description: SHA-256 digest of the built images artifact

permissions:
  contents: read

jobs:
  build-images:
    name: Build and Save ${{ matrix.arch }} Images
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        arch:
          - amd64
          - arm64
        include:
          #- arch: amd64
          #  runner: ubuntu-24.04
          - arch: arm64
            runner: ubuntu-24.04-arm

    outputs:
      artifact-id: ${{ steps.upload-image-tarballs.outputs.artifact-id }}
      artifact-url: ${{ steps.upload-image-tarballs.outputs.artifact-url }}
      artifact-digest: ${{ steps.upload-image-tarballs.outputs.artifact-digest }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: Install Deps
        uses: ./.github/actions/setup-deps

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: ~> v2
          install-only: true
          distribution: goreleaser

      - name: Generate GoReleaser Config
        run: >-
          uv run -- python make-gorel.py
          --header gorel.prologue
          --arch ${{ matrix.arch }}
          > .goreleaser.yaml

      - name: GoReleaser Check(s)
        shell: bash
        run: |
          goreleaser check
          goreleaser healthcheck

      - name: GoReleaser Build
        run: |
          goreleaser release --clean --snapshot

      - id: save-images-tarball
        name: Save Docker Image to Tarball and Upload
        shell: bash
        run: |
          mkdir -p ${{ github.workspace }}/artifacts/images

          docker images

          for COMPONENT in ${{ inputs.components }}; do
              docker save \
              "ghcr.io/emissary-ingress/${COMPONENT}:latest-${{ matrix.arch }}" \
              -o "${{ github.workspace }}/artifacts/images/${COMPONENT}-${{ matrix.arch }}.tar"
          done

      - id: upload-image-tarballs
        name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v5
        with:
          name: ${{ inputs.artifact-bundle-prefix }}-${{ matrix.arch }}
          retention-days: 7
          if-no-files-found: error
          path: ${{ github.workspace }}/artifacts/images/*.tar
